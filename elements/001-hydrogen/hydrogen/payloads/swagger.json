{
  "openapi": "3.1.0",
  "info": {
    "title": "Hydrogen REST API",
    "description": "A comprehensive REST API for the Hydrogen Project that provides system information, OIDC authentication, and various service endpoints",
    "version": "1.0.0",
    "contact": {
      "email": "api@example.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/api",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "OIDC Service",
      "description": "Provides OpenID Connect protocol endpoints and authentication services"
    },
    {
      "name": "System Service",
      "description": "Provides system-level operations, monitoring, and diagnostics"
    }
  ],
  "paths": {
    "/oauth/authorize": {
      "get": {
        "summary": "OAuth 2.0 authorization endpoint",
        "description": "Initiates the OAuth 2.0 authorization flow. For GET requests, presents a login UI to the user. For POST requests, processes login data and redirects with an authorization code. Supports multiple response types including 'code' for Authorization Code flow and 'token' for Implicit flow.",
        "operationId": "authorizeUserGet",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirect": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "OAuth 2.0 authorization endpoint",
        "description": "Initiates the OAuth 2.0 authorization flow. For GET requests, presents a login UI to the user. For POST requests, processes login data and redirects with an authorization code. Supports multiple response types including 'code' for Authorization Code flow and 'token' for Implicit flow.",
        "operationId": "authorizeUserPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirect": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "summary": "OpenID Connect discovery document",
        "description": "Returns a JSON document containing the OpenID Provider's configuration information including all supported endpoints, scopes, response types, and claims. This document follows the OpenID Connect Discovery 1.0 specification.",
        "operationId": "getOpenIDConfiguration",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "authorization_endpoint": {
                      "type": "string"
                    },
                    "token_endpoint": {
                      "type": "string"
                    },
                    "userinfo_endpoint": {
                      "type": "string"
                    },
                    "jwks_uri": {
                      "type": "string"
                    },
                    "registration_endpoint": {
                      "type": "string"
                    },
                    "scopes_supported": {
                      "type": "array"
                    },
                    "response_types_supported": {
                      "type": "array"
                    },
                    "grant_types_supported": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create discovery document"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/end-session": {
      "get": {
        "summary": "OpenID Connect Session Management endpoint",
        "description": "Implements the OpenID Connect RP-Initiated Logout specification. Allows users to log out and terminate their session with the OpenID Provider. Can also notify Relying Parties (client applications) that the user's session has ended.",
        "operationId": "endSessionGet",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirects": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "OpenID Connect Session Management endpoint",
        "description": "Implements the OpenID Connect RP-Initiated Logout specification. Allows users to log out and terminate their session with the OpenID Provider. Can also notify Relying Parties (client applications) that the user's session has ended.",
        "operationId": "endSessionPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirects": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/introspect": {
      "post": {
        "summary": "OAuth 2.0 token introspection endpoint",
        "description": "Allows authorized clients to determine the active state of a token and its metadata as specified in RFC 7662. Resource servers use this endpoint to validate tokens presented by clients and retrieve associated metadata.",
        "operationId": "introspectTokenPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean"
                    },
                    "scope": {
                      "type": "string"
                    },
                    "client_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string"
                    },
                    "exp": {
                      "type": "integer"
                    },
                    "iat": {
                      "type": "integer"
                    },
                    "nbf": {
                      "type": "integer"
                    },
                    "sub": {
                      "type": "string"
                    },
                    "aud": {
                      "type": "string"
                    },
                    "iss": {
                      "type": "string"
                    },
                    "jti": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The request is missing a required parameter"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/jwks": {
      "get": {
        "summary": "JSON Web Key Set endpoint",
        "description": "Returns a set of JSON Web Keys (JWK) that represent the public part of the keys used by the OIDC provider to sign tokens. Clients use these keys to verify the signature of tokens issued by the provider.",
        "operationId": "getJWKS",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kty": {
                            "type": "string"
                          },
                          "use": {
                            "type": "string"
                          },
                          "kid": {
                            "type": "string"
                          },
                          "alg": {
                            "type": "string"
                          },
                          "n": {
                            "type": "string"
                          },
                          "e": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/register": {
      "post": {
        "summary": "Dynamic Client Registration endpoint",
        "description": "Allows clients to register with the OIDC provider, following the OpenID Connect Dynamic Client Registration protocol. The registration metadata is submitted as a JSON document and the server returns client credentials and configuration.",
        "operationId": "registerClientPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string"
                    },
                    "client_secret": {
                      "type": "string"
                    },
                    "client_id_issued_at": {
                      "type": "integer"
                    },
                    "client_secret_expires_at": {
                      "type": "integer"
                    },
                    "registration_access_token": {
                      "type": "string"
                    },
                    "registration_client_uri": {
                      "type": "string"
                    },
                    "redirect_uris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "client_name": {
                      "type": "string"
                    },
                    "client_uri": {
                      "type": "string"
                    },
                    "logo_uri": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string"
                    },
                    "grant_types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "response_types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "token_endpoint_auth_method": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/revoke": {
      "post": {
        "summary": "OAuth 2.0 token revocation endpoint",
        "description": "Allows clients to notify the authorization server that a token is no longer needed, allowing the server to invalidate the token. This endpoint implements RFC 7009 and supports revocation of both access tokens and refresh tokens.",
        "operationId": "revokeTokenPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The request is missing a required parameter"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "summary": "OAuth 2.0 token endpoint",
        "description": "Issues access tokens, refresh tokens, and ID tokens based on the provided grant type. Supports authorization_code, refresh_token, client_credentials, and password grant types. Client authentication is required either via HTTP Basic Authentication or using client_id and client_secret parameters.",
        "operationId": "issueTokensPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "integer"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "id_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/userinfo": {
      "get": {
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Returns claims about the authenticated end-user. Requires a valid access token with appropriate scopes. The claims returned depend on the scopes associated with the access token and the user's profile data.",
        "operationId": "getUserInfo",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sub": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "given_name": {
                      "type": "string"
                    },
                    "family_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_verified": {
                      "type": "boolean"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_token"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token is invalid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "insufficient_scope"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token does not have the required scopes"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Returns claims about the authenticated end-user. Requires a valid access token with appropriate scopes. The claims returned depend on the scopes associated with the access token and the user's profile data.",
        "operationId": "getUserInfoPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sub": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "given_name": {
                      "type": "string"
                    },
                    "family_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_verified": {
                      "type": "boolean"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_token"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token is invalid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "insufficient_scope"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token does not have the required scopes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/config": {
      "get": {
        "summary": "Server configuration endpoint",
        "description": "Returns the server's configuration file in JSON format, brotli compressed if the client supports it.",
        "operationId": "getSystemConfig",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The server's configuration file"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to read configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "summary": "Health check endpoint",
        "description": "Returns a simple health check response indicating the service is alive. Used primarily by load balancers for health monitoring in distributed deployments.",
        "operationId": "getSystemHealth",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Yes, I'm alive, thanks!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "summary": "System information endpoint",
        "description": "Returns comprehensive system information in JSON format including hardware details, operating system information, runtime statistics, and version information.",
        "operationId": "getSystemInfo",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hardware": {
                      "type": "object"
                    },
                    "os": {
                      "type": "object"
                    },
                    "runtime": {
                      "type": "object"
                    },
                    "version": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/test": {
      "get": {
        "summary": "API diagnostic test endpoint\nAPI diagnostic test endpoint",
        "description": "Returns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.\nReturns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.",
        "operationId": "testSystemEndpointGetGet",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.100"
                    },
                    "jwt_claims": {
                      "type": "object"
                    },
                    "headers": {
                      "type": "object"
                    },
                    "query_params": {
                      "type": "array"
                    },
                    "post_data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "API diagnostic test endpoint\nAPI diagnostic test endpoint",
        "description": "Returns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.\nReturns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.",
        "operationId": "testSystemEndpointGetPost",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.100"
                    },
                    "jwt_claims": {
                      "type": "object"
                    },
                    "headers": {
                      "type": "object"
                    },
                    "query_params": {
                      "type": "array"
                    },
                    "post_data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
