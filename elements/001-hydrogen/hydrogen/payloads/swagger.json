{
  "openapi": "3.1.0",
  "info": {
    "title": "Hydrogen REST API",
    "description": "A comprehensive REST API for the Hydrogen Project that provides system information, OIDC authentication, and various service endpoints",
    "version": "1.0.0",
    "contact": {
      "email": "api@example.com"
    },
    "license": {
      "name": "MIT",
      "identifier": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/api",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Conduit Service",
      "description": "Provides database query execution by reference with typed parameters"
    },
    {
      "name": "OIDC Service",
      "description": "Provides OpenID Connect protocol endpoints and authentication services"
    },
    {
      "name": "System Service",
      "description": "Provides system-level operations, monitoring, and diagnostics"
    }
  ],
  "paths": {
    "/conduit/query": {
      "get": {
        "summary": "Execute database query by reference",
        "description": "Executes a pre-defined query from the Query Table Cache using a query reference ID. Supports typed parameters (INTEGER, STRING, BOOLEAN, FLOAT) that are automatically converted to database-specific parameter formats. Returns query results in JSON format with execution metadata. Accepts both GET with query parameters and POST with JSON body.",
        "operationId": "executeQueryByReferenceGet",
        "tags": [
          "Conduit Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "query_ref",
                    "rows"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful query execution",
                      "example": true
                    },
                    "query_ref": {
                      "type": "integer",
                      "description": "The query reference ID that was executed",
                      "example": 1234
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the query",
                      "example": "Fetch user profile by ID"
                    },
                    "rows": {
                      "type": "array",
                      "description": "Array of result rows as JSON objects",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "user_id": 123,
                          "username": "johndoe",
                          "email": "john@example.com",
                          "is_active": true
                        }
                      ]
                    },
                    "row_count": {
                      "type": "integer",
                      "description": "Number of rows returned",
                      "example": 1
                    },
                    "column_count": {
                      "type": "integer",
                      "description": "Number of columns in result",
                      "example": 4
                    },
                    "execution_time_ms": {
                      "type": "integer",
                      "description": "Query execution time in milliseconds",
                      "example": 45
                    },
                    "queue_used": {
                      "type": "string",
                      "description": "Database queue that handled the request",
                      "example": "fast"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Missing required parameter: query_ref"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional error details",
                      "example": "The query_ref parameter is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query not found"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 9999
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query execution timeout"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 1234
                    },
                    "timeout_seconds": {
                      "type": "integer",
                      "example": 30
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database error"
                    },
                    "database_error": {
                      "type": "string",
                      "example": "Table 'users' not found"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 1234
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query execution not yet implemented"
                    },
                    "message": {
                      "type": "string",
                      "example": "The Conduit service infrastructure is being built. This endpoint will execute pre-defined queries once the Query Table Cache, parameter processing, and queue selection systems are complete."
                    },
                    "status": {
                      "type": "string",
                      "example": "under_construction"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "query_ref",
            "in": "query",
            "required": true,
            "description": "Query identifier from Query Table Cache",
            "schema": {
              "type": "integer",
              "example": 1234
            }
          },
          {
            "name": "database",
            "in": "query",
            "required": true,
            "description": "Target database name",
            "schema": {
              "type": "string",
              "example": "Acuranzo"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query_ref",
                  "database"
                ],
                "properties": {
                  "query_ref": {
                    "type": "integer",
                    "description": "Query identifier from Query Table Cache (required)",
                    "example": 1234
                  },
                  "database": {
                    "type": "string",
                    "description": "Target database name (required)",
                    "example": "Acuranzo"
                  },
                  "params": {
                    "type": "object",
                    "description": "Typed parameters for query execution (optional)",
                    "properties": {
                      "INTEGER": {
                        "type": "object",
                        "description": "Integer parameters as key-value pairs",
                        "example": {
                          "userId": 123,
                          "quantity": 50
                        }
                      },
                      "STRING": {
                        "type": "object",
                        "description": "String parameters as key-value pairs",
                        "example": {
                          "username": "johndoe",
                          "email": "john@example.com"
                        }
                      },
                      "BOOLEAN": {
                        "type": "object",
                        "description": "Boolean parameters as key-value pairs",
                        "example": {
                          "isActive": true,
                          "requireAuth": false
                        }
                      },
                      "FLOAT": {
                        "type": "object",
                        "description": "Float parameters as key-value pairs",
                        "example": {
                          "discount": 0.15,
                          "tax": 0.07
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Execute database query by reference",
        "description": "Executes a pre-defined query from the Query Table Cache using a query reference ID. Supports typed parameters (INTEGER, STRING, BOOLEAN, FLOAT) that are automatically converted to database-specific parameter formats. Returns query results in JSON format with execution metadata. Accepts both GET with query parameters and POST with JSON body.",
        "operationId": "executeQueryByReferencePost",
        "tags": [
          "Conduit Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "query_ref",
                    "rows"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful query execution",
                      "example": true
                    },
                    "query_ref": {
                      "type": "integer",
                      "description": "The query reference ID that was executed",
                      "example": 1234
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the query",
                      "example": "Fetch user profile by ID"
                    },
                    "rows": {
                      "type": "array",
                      "description": "Array of result rows as JSON objects",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "user_id": 123,
                          "username": "johndoe",
                          "email": "john@example.com",
                          "is_active": true
                        }
                      ]
                    },
                    "row_count": {
                      "type": "integer",
                      "description": "Number of rows returned",
                      "example": 1
                    },
                    "column_count": {
                      "type": "integer",
                      "description": "Number of columns in result",
                      "example": 4
                    },
                    "execution_time_ms": {
                      "type": "integer",
                      "description": "Query execution time in milliseconds",
                      "example": 45
                    },
                    "queue_used": {
                      "type": "string",
                      "description": "Database queue that handled the request",
                      "example": "fast"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Missing required parameter: query_ref"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional error details",
                      "example": "The query_ref parameter is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query not found"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 9999
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query execution timeout"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 1234
                    },
                    "timeout_seconds": {
                      "type": "integer",
                      "example": 30
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database error"
                    },
                    "database_error": {
                      "type": "string",
                      "example": "Table 'users' not found"
                    },
                    "query_ref": {
                      "type": "integer",
                      "example": 1234
                    },
                    "database": {
                      "type": "string",
                      "example": "Acuranzo"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Query execution not yet implemented"
                    },
                    "message": {
                      "type": "string",
                      "example": "The Conduit service infrastructure is being built. This endpoint will execute pre-defined queries once the Query Table Cache, parameter processing, and queue selection systems are complete."
                    },
                    "status": {
                      "type": "string",
                      "example": "under_construction"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "query_ref",
            "in": "query",
            "required": true,
            "description": "Query identifier from Query Table Cache",
            "schema": {
              "type": "integer",
              "example": 1234
            }
          },
          {
            "name": "database",
            "in": "query",
            "required": true,
            "description": "Target database name",
            "schema": {
              "type": "string",
              "example": "Acuranzo"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query_ref",
                  "database"
                ],
                "properties": {
                  "query_ref": {
                    "type": "integer",
                    "description": "Query identifier from Query Table Cache (required)",
                    "example": 1234
                  },
                  "database": {
                    "type": "string",
                    "description": "Target database name (required)",
                    "example": "Acuranzo"
                  },
                  "params": {
                    "type": "object",
                    "description": "Typed parameters for query execution (optional)",
                    "properties": {
                      "INTEGER": {
                        "type": "object",
                        "description": "Integer parameters as key-value pairs",
                        "example": {
                          "userId": 123,
                          "quantity": 50
                        }
                      },
                      "STRING": {
                        "type": "object",
                        "description": "String parameters as key-value pairs",
                        "example": {
                          "username": "johndoe",
                          "email": "john@example.com"
                        }
                      },
                      "BOOLEAN": {
                        "type": "object",
                        "description": "Boolean parameters as key-value pairs",
                        "example": {
                          "isActive": true,
                          "requireAuth": false
                        }
                      },
                      "FLOAT": {
                        "type": "object",
                        "description": "Float parameters as key-value pairs",
                        "example": {
                          "discount": 0.15,
                          "tax": 0.07
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/authorize": {
      "get": {
        "summary": "OAuth 2.0 authorization endpoint",
        "description": "Initiates the OAuth 2.0 authorization flow. For GET requests, presents a login UI to the user. For POST requests, processes login data and redirects with an authorization code. Supports multiple response types including 'code' for Authorization Code flow and 'token' for Implicit flow.",
        "operationId": "authorizeUserGet",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirect": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "description": "The OAuth 2.0 client identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "description": "The URI to redirect to after successful authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "description": "The OAuth 2.0 response type",
            "schema": {
              "type": "string",
              "example": "code"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "description": "Space-delimited list of requested scopes",
            "schema": {
              "type": "string",
              "example": "openid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Opaque value used for state verification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "required": false,
            "description": "String value used for replay prevention",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "required": false,
            "description": "PKCE code challenge",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "required": false,
            "description": "PKCE code challenge method",
            "schema": {
              "type": "string",
              "example": "S256"
            }
          }
        ]
      },
      "post": {
        "summary": "OAuth 2.0 authorization endpoint",
        "description": "Initiates the OAuth 2.0 authorization flow. For GET requests, presents a login UI to the user. For POST requests, processes login data and redirects with an authorization code. Supports multiple response types including 'code' for Authorization Code flow and 'token' for Implicit flow.",
        "operationId": "authorizeUserPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirect": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "description": "The OAuth 2.0 client identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "description": "The URI to redirect to after successful authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "description": "The OAuth 2.0 response type",
            "schema": {
              "type": "string",
              "example": "code"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "description": "Space-delimited list of requested scopes",
            "schema": {
              "type": "string",
              "example": "openid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Opaque value used for state verification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "required": false,
            "description": "String value used for replay prevention",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "required": false,
            "description": "PKCE code challenge",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "required": false,
            "description": "PKCE code challenge method",
            "schema": {
              "type": "string",
              "example": "S256"
            }
          }
        ]
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "summary": "OpenID Connect discovery document",
        "description": "Returns a JSON document containing the OpenID Provider's configuration information including all supported endpoints, scopes, response types, and claims. This document follows the OpenID Connect Discovery 1.0 specification.",
        "operationId": "getOpenIDConfiguration",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "authorization_endpoint": {
                      "type": "string"
                    },
                    "token_endpoint": {
                      "type": "string"
                    },
                    "userinfo_endpoint": {
                      "type": "string"
                    },
                    "jwks_uri": {
                      "type": "string"
                    },
                    "registration_endpoint": {
                      "type": "string"
                    },
                    "scopes_supported": {
                      "type": "array"
                    },
                    "response_types_supported": {
                      "type": "array"
                    },
                    "grant_types_supported": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create discovery document"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/end-session": {
      "get": {
        "summary": "OpenID Connect Session Management endpoint",
        "description": "Implements the OpenID Connect RP-Initiated Logout specification. Allows users to log out and terminate their session with the OpenID Provider. Can also notify Relying Parties (client applications) that the user's session has ended.",
        "operationId": "endSessionGet",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirects": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id_token_hint",
            "in": "query",
            "required": false,
            "description": "The ID Token previously issued to the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_logout_redirect_uri",
            "in": "query",
            "required": false,
            "description": "URI to redirect the user to after logout",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Opaque value used by the client to maintain state",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "OpenID Connect Session Management endpoint",
        "description": "Implements the OpenID Connect RP-Initiated Logout specification. Allows users to log out and terminate their session with the OpenID Provider. Can also notify Relying Parties (client applications) that the user's session has ended.",
        "operationId": "endSessionPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "302": {
            "description": "Response",
            "content": {
              "Redirects": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id_token_hint",
            "in": "query",
            "required": false,
            "description": "The ID Token previously issued to the client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_logout_redirect_uri",
            "in": "query",
            "required": false,
            "description": "URI to redirect the user to after logout",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Opaque value used by the client to maintain state",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/oauth/introspect": {
      "post": {
        "summary": "OAuth 2.0 token introspection endpoint",
        "description": "Allows authorized clients to determine the active state of a token and its metadata as specified in RFC 7662. Resource servers use this endpoint to validate tokens presented by clients and retrieve associated metadata.",
        "operationId": "introspectTokenPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean"
                    },
                    "scope": {
                      "type": "string"
                    },
                    "client_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string"
                    },
                    "exp": {
                      "type": "integer"
                    },
                    "iat": {
                      "type": "integer"
                    },
                    "nbf": {
                      "type": "integer"
                    },
                    "sub": {
                      "type": "string"
                    },
                    "aud": {
                      "type": "string"
                    },
                    "iss": {
                      "type": "string"
                    },
                    "jti": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The request is missing a required parameter"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The string value of the token"
                  },
                  "token_type_hint": {
                    "type": "string",
                    "description": "A hint about the type of the token",
                    "example": "access_token"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/oauth/jwks": {
      "get": {
        "summary": "JSON Web Key Set endpoint",
        "description": "Returns a set of JSON Web Keys (JWK) that represent the public part of the keys used by the OIDC provider to sign tokens. Clients use these keys to verify the signature of tokens issued by the provider.",
        "operationId": "getJWKS",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kty": {
                            "type": "string"
                          },
                          "use": {
                            "type": "string"
                          },
                          "kid": {
                            "type": "string"
                          },
                          "alg": {
                            "type": "string"
                          },
                          "n": {
                            "type": "string"
                          },
                          "e": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/register": {
      "post": {
        "summary": "Dynamic Client Registration endpoint",
        "description": "Allows clients to register with the OIDC provider, following the OpenID Connect Dynamic Client Registration protocol. The registration metadata is submitted as a JSON document and the server returns client credentials and configuration.",
        "operationId": "registerClientPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string"
                    },
                    "client_secret": {
                      "type": "string"
                    },
                    "client_id_issued_at": {
                      "type": "integer"
                    },
                    "client_secret_expires_at": {
                      "type": "integer"
                    },
                    "registration_access_token": {
                      "type": "string"
                    },
                    "registration_client_uri": {
                      "type": "string"
                    },
                    "redirect_uris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "client_name": {
                      "type": "string"
                    },
                    "client_uri": {
                      "type": "string"
                    },
                    "logo_uri": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string"
                    },
                    "grant_types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "response_types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "token_endpoint_auth_method": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/revoke": {
      "post": {
        "summary": "OAuth 2.0 token revocation endpoint",
        "description": "Allows clients to notify the authorization server that a token is no longer needed, allowing the server to invalidate the token. This endpoint implements RFC 7009 and supports revocation of both access tokens and refresh tokens.",
        "operationId": "revokeTokenPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The request is missing a required parameter"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token to be revoked"
                  },
                  "token_type_hint": {
                    "type": "string",
                    "description": "A hint about the type of the token",
                    "example": "access_token"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "summary": "OAuth 2.0 token endpoint",
        "description": "Issues access tokens, refresh tokens, and ID tokens based on the provided grant type. Supports authorization_code, refresh_token, client_credentials, and password grant types. Client authentication is required either via HTTP Basic Authentication or using client_id and client_secret parameters.",
        "operationId": "issueTokensPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "integer"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "id_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "The OAuth 2.0 grant type",
                    "example": "authorization_code"
                  },
                  "code": {
                    "type": "string",
                    "description": "The authorization code (required for grant_type=authorization_code)"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "The redirect URI used in the authorization request"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The OAuth 2.0 client identifier (if not using HTTP Basic Auth)"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The OAuth 2.0 client secret (if not using HTTP Basic Auth)"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token (required for grant_type=refresh_token)"
                  },
                  "username": {
                    "type": "string",
                    "description": "The resource owner username (required for grant_type=password)"
                  },
                  "password": {
                    "type": "string",
                    "description": "The resource owner password (required for grant_type=password)"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Space-delimited list of requested scopes",
                    "example": "openid"
                  },
                  "code_verifier": {
                    "type": "string",
                    "description": "PKCE code verifier (if code_challenge was used)"
                  }
                },
                "required": [
                  "grant_type"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/oauth/userinfo": {
      "get": {
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Returns claims about the authenticated end-user. Requires a valid access token with appropriate scopes. The claims returned depend on the scopes associated with the access token and the user's profile data.",
        "operationId": "getUserInfo",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sub": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "given_name": {
                      "type": "string"
                    },
                    "family_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_verified": {
                      "type": "boolean"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_token"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token is invalid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "insufficient_scope"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token does not have the required scopes"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Returns claims about the authenticated end-user. Requires a valid access token with appropriate scopes. The claims returned depend on the scopes associated with the access token and the user's profile data.",
        "operationId": "getUserInfoPost",
        "tags": [
          "OIDC Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sub": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "given_name": {
                      "type": "string"
                    },
                    "family_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_verified": {
                      "type": "boolean"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_token"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token is invalid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "insufficient_scope"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The access token does not have the required scopes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/appconfig": {
      "get": {
        "summary": "Application configuration endpoint",
        "description": "Returns the current application configuration settings in plain text format",
        "operationId": "getSystemAppConfig",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Current application configuration"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/config": {
      "get": {
        "summary": "Server configuration endpoint",
        "description": "Returns the server's configuration file in JSON format, brotli compressed if the client supports it.",
        "operationId": "getSystemConfig",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The server's configuration file"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to read configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "summary": "Health check endpoint",
        "description": "Returns a simple health check response indicating the service is alive. Used primarily by load balancers for health monitoring in distributed deployments.",
        "operationId": "getSystemHealth",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Yes, I'm alive, thanks!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "summary": "System information endpoint",
        "description": "Returns comprehensive system information in JSON format including hardware details, operating system information, runtime statistics, and version information.",
        "operationId": "getSystemInfo",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hardware": {
                      "type": "object"
                    },
                    "os": {
                      "type": "object"
                    },
                    "runtime": {
                      "type": "object"
                    },
                    "version": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/prometheus": {
      "get": {
        "summary": "System metrics endpoint (Prometheus)",
        "description": "Returns system metrics in a format compatible with Prometheus monitoring system",
        "operationId": "getSystemPrometheus",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hardware": {
                      "type": "object"
                    },
                    "os": {
                      "type": "object"
                    },
                    "runtime": {
                      "type": "object"
                    },
                    "version": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/recent": {
      "get": {
        "summary": "Recent log messages endpoint",
        "description": "Returns the most recent log messages from the system in reverse chronological order",
        "operationId": "getSystemRecent",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string"
                          },
                          "level": {
                            "type": "string"
                          },
                          "component": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/test": {
      "get": {
        "summary": "API diagnostic test endpoint\nAPI diagnostic test endpoint",
        "description": "Returns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.\nReturns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.",
        "operationId": "testSystemEndpointGetGet",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.100"
                    },
                    "jwt_claims": {
                      "type": "object"
                    },
                    "headers": {
                      "type": "object"
                    },
                    "query_params": {
                      "type": "array"
                    },
                    "post_data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "API diagnostic test endpoint\nAPI diagnostic test endpoint",
        "description": "Returns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.\nReturns diagnostic information useful for testing and debugging API calls. Supports both GET and POST methods to test different request types. The response includes client IP address, authentication details, headers, query parameters, and POST data.",
        "operationId": "testSystemEndpointGetPost",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.100"
                    },
                    "jwt_claims": {
                      "type": "object"
                    },
                    "headers": {
                      "type": "object"
                    },
                    "query_params": {
                      "type": "array"
                    },
                    "post_data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/upload": {
      "post": {
        "summary": "File upload endpoint (API method)",
        "description": "Uploads files via REST API with structured JSON responses. For web-based uploads, use the alternative method described below.",
        "operationId": "uploadFilePost",
        "tags": [
          "System Service"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "object"
                    },
                    "done": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "file",
                    "description": "File to upload"
                  },
                  "print": {
                    "type": "string",
                    "description": "Set to true to queue file for printing after upload"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
