#!/bin/bash

# Script: analyze-gcov-coverage.sh
# Purpose: Analyze gcov files to show detailed line-by-line coverage statistics
# Usage: ./analyze-gcov-coverage.sh
# 
# This script analyzes gcov files generated by Test 99 and provides
# detailed coverage information focusing on the meaningful blackbox test data.

# Get script directory and project paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BUILD_DIR="$PROJECT_ROOT/build"

# Initialize counters
total_covered_lines=0
total_instrumented_lines=0
total_files=0

# Function to analyze a single gcov file
analyze_gcov_file() {
    local gcov_file="$1"
    local covered_lines=0
    local instrumented_lines=0
    
    # Parse the gcov file
    while IFS= read -r line; do
        # Skip metadata lines (starting with spaces and dash)
        if [[ "$line" =~ ^[[:space:]]*-:[[:space:]]*[0-9]+: ]]; then
            continue
        fi
        
        # Count covered lines (lines with execution count)
        if [[ "$line" =~ ^[[:space:]]*[0-9]+:[[:space:]]*[0-9]+: ]]; then
            ((covered_lines++))
            ((instrumented_lines++))
        # Count uncovered but instrumented lines
        elif [[ "$line" =~ ^[[:space:]]*#####:[[:space:]]*[0-9]+: ]]; then
            ((instrumented_lines++))
        fi
    done < "$gcov_file"
    
    # Skip files with no instrumented lines
    if [ $instrumented_lines -eq 0 ]; then
        return
    fi
    
    # Calculate coverage ratio
    local coverage_ratio="0.000"
    if [ $instrumented_lines -gt 0 ]; then
        coverage_ratio=$(awk "BEGIN {printf \"%.3f\", ($covered_lines / $instrumented_lines) * 100}")
    fi
    
    # Clean up the path for display
    local display_path="${gcov_file#"$PROJECT_ROOT"/}"
    
    # If it's a CMake build path, extract just the source file part
    if [[ "$display_path" == *"CMakeFiles"* ]] && [[ "$display_path" == *"hydrogen_coverage_exe.dir"* ]]; then
        # Extract everything after /src/ in the path and clean it up
        display_path="${display_path#*/src/}"
        display_path="src/$display_path"
    fi
    
    # Output formatted line: filename, covered, instrumented, ratio
    printf "%-75s %10s %12s %10s\n" \
        "$display_path" \
        "$(printf "%'d" $covered_lines)" \
        "$(printf "%'d" $instrumented_lines)" \
        "${coverage_ratio}%"
    
    # Add to totals
    total_covered_lines=$((total_covered_lines + covered_lines))
    total_instrumented_lines=$((total_instrumented_lines + instrumented_lines))
    total_files=$((total_files + 1))
}

# Print header
echo "GCOV Coverage Analysis Report"
echo "Generated: $(date)"
echo "Project: $(basename "$PROJECT_ROOT")"
echo ""
echo "Coverage statistics from blackbox test gcov files"
echo ""
printf "%-75s %10s %12s %10s\n" "File Path" "Covered" "Instrumented" "Coverage"
printf "%-75s %10s %12s %10s\n" "$(printf '%0.s-' {1..75})" "$(printf '%0.s-' {1..10})" "$(printf '%0.s-' {1..12})" "$(printf '%0.s-' {1..10})"

# Find and analyze gcov files from the build directory
gcov_files_found=0

if [ -d "$BUILD_DIR" ]; then
    while IFS= read -r -d '' gcov_file; do
        # Extract the source filename from the gcov file
        filename=$(basename "$gcov_file" .gcov)
        
        # Skip external libraries and test framework files
        if [[ "$filename" == "unity.c" ]] || \
           [[ "$filename" == "jansson"* ]] || \
           [[ "$filename" == "test_"* ]] || \
           [[ "$gcov_file" == *"/usr/include/"* ]]; then
            continue
        fi
        
        analyze_gcov_file "$gcov_file"
        ((gcov_files_found++))
    done < <(find "$BUILD_DIR" -name "*.gcov" -type f -print0 2>/dev/null)
fi

# Print summary
echo ""
printf "%-75s %10s %12s %10s\n" "$(printf '%0.s=' {1..75})" "$(printf '%0.s=' {1..10})" "$(printf '%0.s=' {1..12})" "$(printf '%0.s=' {1..10})"

# Calculate overall coverage percentage
overall_coverage="0.000"
if [ $total_instrumented_lines -gt 0 ]; then
    overall_coverage=$(awk "BEGIN {printf \"%.3f\", ($total_covered_lines / $total_instrumented_lines) * 100}")
fi

printf "%-75s %10s %12s %10s\n" "TOTAL ($total_files files)" \
    "$(printf "%'d" $total_covered_lines)" \
    "$(printf "%'d" $total_instrumented_lines)" \
    "${overall_coverage}%"

echo ""
echo "Summary:"
echo "  Files analyzed: $gcov_files_found"
echo "  Total covered lines: $(printf "%'d" $total_covered_lines)"
echo "  Total instrumented lines: $(printf "%'d" $total_instrumented_lines)"
echo "  Overall coverage: ${overall_coverage}%"
