CREATE TABLE test.queries (
    query_id                int          NOT NULL,
    query_ref               int          NOT NULL,
    query_status_a27        int          NOT NULL,
    query_type_a28          int          NOT NULL,
    query_dialect_a30       int          NOT NULL,
    query_queue_a58         int          NOT NULL,
    query_timeout           int          NOT NULL,
    code                    text          NOT NULL,
    name                    text             NOT NULL,
    summary                 text                  ,
    collection              longtext                     ,
    valid_after             timestamp             ,
    valid_until             timestamp             ,
    created_id              int          NOT NULL,
    created_at              timestamp     NOT NULL,
    updated_id              int          NOT NULL,
    updated_at              timestamp     NOT NULL,
    PRIMARY KEY (query_id),                  -- Primary Key
    UNIQUE (query_ref, query_type_a28)   -- Unique Column
);
-- QUERY DELIMITER
-- Defined in database_<engine>.lua as a macro
CREATE OR REPLACE FUNCTION json_ingest(s longtext)
RETURNS longtext
DETERMINISTIC
BEGIN
DECLARE fixed longtext DEFAULT '';
DECLARE i INT DEFAULT 1;
DECLARE L INT DEFAULT CHAR_LENGTH(s);
DECLARE ch CHAR(1);
DECLARE in_str BOOL DEFAULT FALSE;
DECLARE esc BOOL DEFAULT FALSE;
-- fast path: check validity without exception
IF JSON_VALID(s) THEN
RETURN s;
END IF;
-- fallback: escape control chars in strings
WHILE i <= L DO
SET ch = SUBSTRING(s, i, 1);
IF esc THEN
SET fixed = CONCAT(fixed, ch);
SET esc = FALSE;
ELSEIF ch = '\\' THEN
SET fixed = CONCAT(fixed, ch);
SET esc = TRUE;
ELSEIF ch = '''' THEN
SET fixed = CONCAT(fixed, ch);
SET in_str = NOT in_str;
ELSEIF in_str AND ch = '\n' THEN
SET fixed = CONCAT(fixed, '\\n');
ELSEIF in_str AND ch = '\r' THEN
SET fixed = CONCAT(fixed, '\\r');
ELSEIF in_str AND ch = '\t' THEN
SET fixed = CONCAT(fixed, '\\t');
ELSEIF in_str AND ORD(ch) < 32 THEN
-- General escape for other control chars (U+0000-U+001F) as \u00xx
SET fixed = CONCAT(fixed, CONCAT('\\u00', LPAD(HEX(ORD(ch)), 2, '0')));
ELSE
SET fixed = CONCAT(fixed, ch);
END IF;
SET i = i + 1;
END WHILE;
RETURN fixed;
END;
-- QUERY DELIMITER
INSERT INTO test.queries (
    query_id,
    query_ref,
    query_status_a27,
    query_type_a28,
    query_dialect_a30,
    query_queue_a58,
    query_timeout,
    code,
    name,
    summary,
    collection,
    valid_after,
    valid_until,
    created_id,
    created_at,
    updated_id,
    updated_at
)
VALUES (
    (SELECT COALESCE(MAX(query_id), 0) + 1 FROM test.queries),  -- query_id
    1000,                                                       -- query_ref
    1,                                                          -- query_status_a27
    1003,                                                       -- query_type_a28
    3,                                                          -- query_dialect_a30
    0,                                                          -- query_queue_a58
    5000,                                                       -- query_timeout
'CREATE TABLE test.queries (
    query_id                int,
    query_ref               int          NOT NULL,
    query_status_a27        int          NOT NULL,
    query_type_a28          int          NOT NULL,
    query_dialect_a30       int          NOT NULL,
    query_queue_a58         int          NOT NULL,
    query_timeout           int          NOT NULL,
    query_code              text          NOT NULL,
    name                    varchar(100)      NOT NULL,
    summary                 text                  ,
    collection              longtext                     ,
    valid_after             timestamp             ,
    valid_until             timestamp             ,
    created_id              int          NOT NULL,
    created_at              timestamp     NOT NULL,
    updated_id              int          NOT NULL,
    updated_at              timestamp     NOT NULL,
    
    PRIMARY KEY(query_id),                  -- Primary Key
    UNIQUE KEY(query_ref)                   -- Unique Column
);'
    ,
    -- code
    'Create queries Table',                 -- name
'# Forward Migration 1000: Create queries Table

This is the first migration that, technically, is run automatically
when connecting to an empty database and kicks off the migration,
so long as the database has been configured with AutoMigration: true
in its config (this is the default if not supplied).'
    ,
    -- summary
    NULL,                                   -- collection
    NULL,                                   -- valid_after
    NULL,                                   -- valid_until
    0,                                      -- created_id
    CURRENT_TIMESTAMP,                      -- created_at
    0,                                      -- updated_id
    CURRENT_TIMESTAMP                       -- updated_at
);
-- QUERY DELIMITER
INSERT INTO test.queries (
    query_id,
    query_ref,
    query_status_a27,
    query_type_a28,
    query_dialect_a30,
    query_queue_a58,
    query_timeout,
    code,
    name,
    summary,
    collection,
    valid_after,
    valid_until,
    created_id,
    created_at,
    updated_id,
    updated_at
)
VALUES (
    (SELECT COALESCE(MAX(query_id), 0) + 1 FROM test.queries),  -- query_id
    1000,                                                       -- query_ref
    1,                                                          -- query_status_a27
    1001,                                                       -- query_type_a28
    3,                                                          -- query_dialect_a30
    0,                                                          -- query_queue_a58
    5000,                                                       -- query_timeout
'DROP TABLE test.queries;'
    ,
    -- code
    'Drop queries Table',                   -- name
'# Reverse Migration 1000: Drop queries Table

This is provided for completeness when testing the migration system
to ensure that forward and reverse migrations are complete.'
    ,
    -- summary
    NULL,                                   -- collection
    NULL,                                   -- valid_after
    NULL,                                   -- valid_until
    0,                                      -- created_id
    CURRENT_TIMESTAMP,                      -- created_at
    0,                                      -- updated_id
    CURRENT_TIMESTAMP                       -- updated_at
);
-- QUERY DELIMITER
INSERT INTO test.queries (
    query_id,
    query_ref,
    query_status_a27,
    query_type_a28,
    query_dialect_a30,
    query_queue_a58,
    query_timeout,
    code,
    name,
    summary,
    collection,
    valid_after,
    valid_until,
    created_id,
    created_at,
    updated_id,
    updated_at
)
VALUES (
    (SELECT COALESCE(MAX(query_id), 0) + 1 FROM test.queries),  -- query_id
    1000,                                                       -- query_ref
    1,                                                          -- query_status_a27
    1002,                                                       -- query_type_a28
    3,                                                          -- query_dialect_a30
    0,                                                          -- query_queue_a58
    5000,                                                       -- query_timeout
    'JSON Table Definition in collection',                      -- code
    'Diagram Tables: test.queries',                             -- name
'# Diagram Migration 1000

## Diagram Tables: test.queries

This is the first JSON Diagram code for the queries table.'
    ,
    -- summary
    -- DIAGRAM_START
    test.json_ingest(
'{
    "diagram": [
        {
            "object_type": "template",
            "object_id": "base template",
            "object_value": "<svg   xmlns=\"http://www.w3.org/2000/svg\"
            xmlns:xlink=\"http://www.w3.org/1999/xlink\"
            width=\"2520\"
            height=\"1980\"
            viewBox=\"0 0 2520 1980\">
            <!-- Define clipPath for rounded border with 2mm margin -->
            <defs>
            <clipPath id=\"border-clip\">
            <rect x=\"18\" y=\"18\" width=\"2484\" height=\"1944\" rx=\"42.51\" ry=\"42.51\"/>
            </clipPath>
            </defs>
            <!-- Thin black border with 2mm margin -->
            <rect x=\"18\" y=\"18\" width=\"2484\" height=\"1944\" fill=\"none\" stroke=\"black\" stroke-width=\"3\" rx=\"42.51\" ry=\"42.51\"/>
            <!-- White background within border, clipped to rounded shape -->
            <rect x=\"18\" y=\"18\" width=\"2484\" height=\"1944\" fill=\"white\" clip-path=\"url(#border-clip)\"/>
            <!-- 1cm (28.3pt) dashed silver grid, offset by 2mm margin -->
            <defs>
            <pattern id=\"grid\" width=\"84.9\" height=\"84.9\" patternUnits=\"userSpaceOnUse\" x=\"18\" y=\"18\">
            <path d=\"M 84.9 0 L 0 0 0 84.9\" fill=\"none\" stroke=\"black\" stroke-width=\"1.5\" stroke-dasharray=\"6,6\"/>
            </pattern>
            </defs>
            <rect x=\"18\" y=\"18\" width=\"2484\" height=\"1944\" fill=\"url(#grid)\" clip-path=\"url(#border-clip)\"/>
            <!-- ERD content placeholder -->
            <g id=\"erd-content\" transform=\"translate(0, 0)\">
            <!-- ERD SVG content goes here -->
            </g>
            </svg>"
        },
        {
            "object_type": "table",
            "object_id": "table.queries",
            "object_ref": "1000",
            "table": [
                {
                    "name": "query_id",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": true,
                    "unique": true
                },
                {
                    "name": "query_ref",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": true
                },
                {
                    "name": "query_status_a27",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "lookup": true
                },
                {
                    "name": "query_type_a28",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "lookup": true
                },
                {
                    "name": "query_dialect_a30",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "lookup": true
                },
                {
                    "name": "query_queue_a58",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "lookup": true
                },
                {
                    "name": "query_timeout",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "lookup": false
                },
                {
                    "name": "query_code",
                    "datatype": "text",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false
                },
                {
                    "name": "name",
                    "datatype": "text",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false
                    
                },
                {
                    "name": "summary",
                    "datatype": "text",
                    "nullable": true,
                    "primary_key": false,
                    "unique": false
                },
                {
                    "name": "collection",
                    "datatype": "longtext",
                    "nullable": true,
                    "primary_key": false,
                    "unique": false,
                    "standard": false
                },
                {
                    "name": "valid_after",
                    "datatype": "timestamp",
                    "nullable": true,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                },
                {
                    "name": "valid_until",
                    "datatype": "timestamp",
                    "nullable": true,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                },
                {
                    "name": "created_id",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                },
                {
                    "name": "created_at",
                    "datatype": "timestamp",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                },
                {
                    "name": "updated_id",
                    "datatype": "int",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                },
                {
                    "name": "updated_at",
                    "datatype": "timestamp",
                    "nullable": false,
                    "primary_key": false,
                    "unique": false,
                    "standard": true
                }
                
            ]
        }
    ]
}'
    )
    -- DIAGRAM_END
    ,                                       -- collection
    NULL,                                   -- valid_after
    NULL,                                   -- valid_until
    0,                                      -- created_id
    CURRENT_TIMESTAMP,                      -- created_at
    0,                                      -- updated_id
    CURRENT_TIMESTAMP                       -- updated_at
);

